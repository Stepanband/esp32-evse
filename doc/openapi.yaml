# npx openapi-to-md -s openapi.yaml REST.md
openapi: 3.0.3
info:
  title: REST API
  description: |-
    REST API are listening on port 80.
    Default not require authentication.
    For reset authentication credentials, hold WiFi button for 10 seconds.
    (Note: everything configuration in NVS will be erased!)
  version: '1.0'
servers:
  - url: http://192.168.4.1/api/v1
tags:
  - name: state
    description: Everything about state
  - name: info
    description: Everything about info
  - name: board-config
    description: Everything about board config
  - name: config
    description: Everything about config
  - name: system
    description: Everything about system
  - name: credentials
    description: Everything about credentials
security:
  - basicAuth: []
paths:
  /info:
    get:
      tags:
        - info
      summary: Get info
      operationId: getInfo
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
        '401':
          description: Not authenticated
  /boardConfig:
    get:
      tags:
        - board-config
      summary: Get board config
      operationId: getBoardConfig
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardConfig'
        '401':
          description: Not authenticated
  /state:
    get:
      tags:
        - state
      summary: Get state
      operationId: getState
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
        '401':
          description: Not authenticated
  /config:
    get:
      tags:
        - config
      summary: Get full config
      operationId: getConfig
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullConfig'
        '401':
          description: Not authenticated
  /config/evse:
    get:
      tags:
        - config
      summary: Get EVSE config
      operationId: getEvseConfig
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvseConfig'
        '401':
          description: Not authenticated
    post:
      tags:
        - config
      summary: Set EVSE config
      operationId: setEvseConfig
      requestBody:      
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvseConfig'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Config updated
        '400':
          description: Bad request
        '401':
          description: Not authenticated
  /config/wifi:
    get:
      tags:
        - config
      summary: Get WiFi config
      operationId: getWifiConfig
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WifiConfig'
        '401':
          description: Not authenticated
    post:
      tags:
        - config
      summary: Set WiFi config
      operationId: setWifiConfig
      requestBody:      
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvseConfig'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Config updated
        '400':
          description: Bad request
        '401':
          description: Not authenticated
  /config/mqtt:
    get:
      tags:
        - config
      summary: Get MQTT config
      operationId: getMqttConfig
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MqttConfig'
        '401':
          description: Not authenticated
    post:
      tags:
        - config
      summary: Set MQTT config
      operationId: setMqttConfig
      requestBody:      
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MqttConfig'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Config updated
        '400':
          description: Bad request
        '401':
          description: Not authenticated
  /config/tcpLogger:
    get:
      tags:
        - config
      summary: Get TCP logger config
      operationId: getTcpLoggerConfig
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TcpLoggerConfig'
        '401':
          description: Not authenticated
    post:
      tags:
        - config
      summary: Set TCP logger config
      operationId: setTcpLoggerConfig
      requestBody:      
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TcpLoggerConfig'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Config updated
        '400':
          description: Bad request
        '401':
          description: Not authenticated
  /config/serial:
    get:
      tags:
        - config
      summary: Get serial config
      operationId: getSerialConfig
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SerialConfig'
        '401':
          description: Not authenticated
    post:
      tags:
        - config
      summary: Set serial config
      operationId: setSerialConfig
      requestBody:      
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SerialConfig'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Config updated
        '400':
          description: Bad request
        '401':
          description: Not authenticated
  /config/modbus:
    get:
      tags:
        - config
      summary: Get modbus config
      operationId: getTModbusConfig
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModbusConfig'
        '401':
          description: Not authenticated
    post:
      tags:
        - config
      summary: Set modbus config
      operationId: setModbusConfig
      requestBody:      
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModbusConfig'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Config updated
        '400':
          description: Bad request
        '401':
          description: Not authenticated
  /restart:
    post:
      tags:
        - system
      summary: Restart device
      operationId: restart
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Restart in one second
        '401':
          description: Not authenticated
  /firmware/checkUpdate:
    post:
      tags:
        - system
      summary: Check for new firmware version on OTA server
      operationId: firmwareCheckUpdate
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmwareCheck'
        '400':
          description: Bad request
        '401':
          description: Not authenticated
        '500':
          description: Internal server error
  /firmware/update:
    post:
      tags: 
        - system
      summary: Update firmware from OTA server
      operationId: firmwareUpdate
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Firmware upgraded successfully
        '401':
          description: Not authenticated
        '500':
          description: Firmware upgrade failed
  /firmware/upload:
    post:
      tags: 
        - system
      summary: Upload firmware
      operationId: firmwareUpload
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Firmware uploaded successfully
        '401':
          description: Not authenticated
        '500':
          description: Firmware upload failed
  /credentials:
    post:
      tags:
        - credentials
      summary: Set authorization credentials
      operationId: setCredentials
      requestBody:      
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Credentials updated
        '400':
          description: Bad request
        '401':
          description: Not authenticated
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    SerialType:
      type: string
      description: Serial type
      enum: ['none', 'uart', 'rs485']
    SerialMode:
      type: string
      description: Serial operating mode
      enum: ['none', 'at', 'log', 'modbus']
    SerialDataBits:
      type: string
      description: Data bits
      enum: ['5', '6', '7', '8']
    SerialStopBits:
      type: string
      description: Stop bits
      enum: ['1', '1.5', '2']
    SerialParity:
      type: string
      description: Parity
      enum: ['disable', 'even', 'odd']
    Info:
      type: object
      properties:
        appDate:
          type: string
          example: Jan 1 2023
        appTime:
          type: string
          example: 06:54:38
        appVersion:
          type: string
          example: v1.0.0
        chip:
          type: string
          example: esp32
        chipCores:
          type: integer
        chipRevision:
          type: number
        idfVersion:
          type: string
          example: v5.0
        ip:
          type: string
          format: ipv4
        ipAp:
          type: string
          format: ipv4
        mac:
          type: string
          format: mac
        macAp:
          type: string
          format: mac
        maxHeapSize:
          type: integer
        temperatureHigh:
          type: number
        temperatureLow:
          type: number
        temperatureSensorCount:
          type: integer
        uptime:
          type: integer
          description: Uptime in s
      required: 
        - appDate
        - appTime
        - appVersion
        - chip
        - chipCores
        - chipRevision
        - idfVersion
        - ip
        - ipAp
        - mac
        - macAp
        - maxHeapSize
        - temperatureHigh
        - temperatureLow
        - temperatureSensorCount
        - uptime
    BoardConfig:
      type: object
      properties:
        aux1:
          type: boolean
        aux2:
          type: boolean
        aux3:
          type: boolean
        deviceName:
          type: string
        energyMeter:
          type: string
          enum: ['none', 'cur', 'cur_vlt']
        energyMeterThreePhases:
          type: boolean
        maxChargingCurrent:
          type: integer
        proximity:
          type: boolean
        rcm:
          type: boolean
        serial1:
          $ref: '#/components/schemas/SerialType'
        serial1Name:
          type: string
        serial2:
          $ref: '#/components/schemas/SerialType'
        serial2Name:
          type: string
        serial3:
          $ref: '#/components/schemas/SerialType'
        serial3Name:
          type: string
        socketLock:
          type: boolean
        socketLockMinBreakTime:
          type: integer
      required: 
        - aux1
        - aux2
        - aux3
        - deviceName
        - energyMeter
        - energyMeterThreePhases
        - maxChargingCurrent
        - proximity
        - rcm
        - serial1
        - serial1Name
        - serial2
        - serial2Name
        - serial3
        - serial3Name
        - socketLock
        - socketLockMinBreakTime
    State:
      type: object
      properties:
        actualPower: 
          type: integer
          description: Power in W
        consumption:
          type: integer
          description: Session consumption in Ws
        current:
          type: array
          description: L1-L3 current in A
          items:
            type: number
          minItems: 3
          maxItems: 3
          example: [10, 10, 10]
        voltage:
          type: array
          description: L1-L3 voltage in V
          items:
            type: number
          minItems: 3
          maxItems: 3          
          example: [250, 250, 250]
        elapsed:
          type: integer
          description: Session elapsed time in s
        enabled:
          type: boolean
          description: Charging enabled
        error:
          type: integer
          description: Non zero value if error occured
        limitReached:
          type: boolean
          description: Session charging limit reached
        pendingAuth:
          type: boolean
          description: Pending auhorization before start charging, when authorization is required
        state:
          type: string
          description: EVSE state
          enum: ['A', 'B', 'C', 'D', 'E', 'F']
      required: 
        - actualPower
        - consumption
        - current
        - voltage
        - elapsed
        - enabled
        - error
        - limitReached
        - pendingAuth
        - state
    EvseConfig:
      type: object
      properties:
        chargingCurrent:
          type: number
          description: Charging current in A
        defaultChargingCurrent:
          type: number
          description: Default charging current in A, stored in NVS
        requireAuth:
          type: boolean
          description: Require authorization to start charging
        socketOutlet:
          type: boolean
          description: Socket outlet functionality (proximity pilot sensing and socket lock if available)
        rcm:
          type: boolean
          description: Residual current monitor
        consumptionLimit:
          type: integer
          description: Session consumption limit in Ws
        defaultConsumptionLimit:
          type: integer
          description: Default session consumption limit in Ws, stored in NVS
        elapsedLimit:
          type: integer
          description: Session elapsed time limit in s
        defaultElapsedLimit:
          type: integer
          description: Default session elapsed time limit in s, stored in NVS
        underPowerLimit:
          type: integer
          description: Session underpower limit in W
        defaultUnderPowerLimit:
          type: integer
          description: Default session underpower limit in W, stored in NVS
        socketLockOperatingTime:
          type: integer
          description: Socket lock operating time in ms
        socketLockBreakTime:
          type: integer
          description: Socket lock break time in ms
        socketLockDetectionHigh:
          type: boolean
          description: Socket lock detection (unlock_high=false, locked_high=true)
        socketLockRetryCount:
          type: integer
          description: Socket lock retry count
        energyMeter:
          type: string
          enum: ['none', 'cur', 'cur_vlt', 'pulse']
          description: Energy meter mode
        acVoltage:
          type: integer
          description: Energy meter voltage in V, when is not measured
        pulseAmount: 
          type: integer
          description: Energy meter pulse amount in Wh
        aux1:
          type: string
        aux2:
          type: string
        aux3:
          type: string
    ModbusConfig:
      type: object
      properties:
        tcpEnabled:
          type: boolean
          description: Enable Modbus TCP/IP slave on port 502
        unitId:
          type: integer
          minimum: 1
          maximum: 255
          description: Modbus Unit ID
      required: 
        - tcpEnabled
        - unitId
    MqttConfig:
      type: object
      properties:
        enabled:
          type: boolean
          description: Enable MQTT
        server:
          type: string
          description: Server url
          example: mqtt://broker.hivemq.com:1883
        baseTopic:
          type: string
          description: Base topic
          examples:
            - evse
            - park/evse1
            - park/evse2
        user:
          type: string
          description: User, empty string if not required
        password:
          type: string
          description: Passport, empty string if not required
        periodicity:
          type: integer
          description: Periodicity publishing state topic in s
      required: 
        - enabled
        - server
        - baseTopic
        - user
        - password
        - periodicity
    SerialConfig:
      type: object
      properties:
        serial1Mode: 
          $ref: '#/components/schemas/SerialMode'
        serial1BaudRate:
          type: integer
          description: Baud rate
          example: 115200
        serial1DataBits:
          $ref: '#/components/schemas/SerialDataBits'
        serial1StopBits:
          $ref: '#/components/schemas/SerialStopBits'
        serial1Parity:
          $ref: '#/components/schemas/SerialParity'
        serial2Mode: 
          $ref: '#/components/schemas/SerialMode'
        serial2BaudRate:
          type: integer
          description: Baud rate
          example: 115200
        serial2DataBits:
          $ref: '#/components/schemas/SerialDataBits'
        serial2StopBits:
          $ref: '#/components/schemas/SerialStopBits'
        serial2Parity:
          $ref: '#/components/schemas/SerialParity'
        serial3Mode: 
          $ref: '#/components/schemas/SerialMode'
        serial3BaudRate:
          type: integer
          description: Baud rate
          example: 115200
        serial3DataBits:
          $ref: '#/components/schemas/SerialDataBits'
        serial3StopBits:
          $ref: '#/components/schemas/SerialStopBits'
        serial3Parity:
          $ref: '#/components/schemas/SerialParity'
      required: 
        - serial1Mode
        - serial1BaudRate
        - serial1DataBits
        - serial1StopBits
        - serial1Parity
        - serial2Mode
        - serial2BaudRate
        - serial2DataBits
        - serial2StopBits
        - serial2Parity
        - serial3Mode
        - serial3BaudRate
        - serial3DataBits
        - serial3StopBits
        - serial3Parity
    TcpLoggerConfig:
      type: object
      properties: 
        enabled:
          type: boolean
          description: Enable TCP logger on port 3000
      required: 
        - enabled
    WifiConfig:
      type: object
      properties: 
        enabled:
          type: boolean
          description: Enable WiFi STA connection
        ssid:
          type: string
          description: WiFi SSID
        password:
          type: string
          description: Passport, empty string if not required
      required: 
        - enabled
        - ssid
    FullConfig:
      type: object
      properties:
        evse:
          $ref: '#/components/schemas/EvseConfig'
        modbus:
          $ref: '#/components/schemas/ModbusConfig'
        mqtt:
          $ref: '#/components/schemas/MqttConfig'
        serial:
          $ref: '#/components/schemas/SerialConfig'
        tcpLogger:
          $ref: '#/components/schemas/TcpLoggerConfig'
        wifi:
          $ref: '#/components/schemas/WifiConfig'
      required: 
        - evse
        - modbus
        - mqtt
    FirmwareCheck:
      type: object
      properties: 
        available:
          type: string
          description: Available firmware version
        current:
          type: string
          description: Current firmware version
        newer:
          type: boolean
          description: Is avaialble newer version than current
      required: 
        - available
        - current
        - newer
    Credentials:
      type: object
      properties: 
        user:
          type: string
          description: Username, empty string if not required
        password:
          type: string
          description: Password, empty string if not required
